// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 3.readings.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createReading = `-- name: CreateReading :one
INSERT INTO readings (device_id, at, hours_delta, location, operator_id)
VALUES ($1,$2,$3,$4,$5)
RETURNING id, device_id, at, hours_delta, location, operator_id, created_at
`

type CreateReadingParams struct {
	DeviceID   int64              `json:"device_id"`
	At         pgtype.Timestamptz `json:"at"`
	HoursDelta int32              `json:"hours_delta"`
	Location   *string            `json:"location"`
	OperatorID *string            `json:"operator_id"`
}

func (q *Queries) CreateReading(ctx context.Context, arg CreateReadingParams) (Reading, error) {
	row := q.db.QueryRow(ctx, createReading,
		arg.DeviceID,
		arg.At,
		arg.HoursDelta,
		arg.Location,
		arg.OperatorID,
	)
	var i Reading
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.At,
		&i.HoursDelta,
		&i.Location,
		&i.OperatorID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteReading = `-- name: DeleteReading :exec
DELETE FROM readings WHERE id = $1
`

func (q *Queries) DeleteReading(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteReading, id)
	return err
}

const getLastReading = `-- name: GetLastReading :one
SELECT id, device_id, at, hours_delta, location, operator_id, created_at FROM readings
WHERE device_id = $1
ORDER BY at DESC
LIMIT 1
`

func (q *Queries) GetLastReading(ctx context.Context, deviceID int64) (Reading, error) {
	row := q.db.QueryRow(ctx, getLastReading, deviceID)
	var i Reading
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.At,
		&i.HoursDelta,
		&i.Location,
		&i.OperatorID,
		&i.CreatedAt,
	)
	return i, err
}

const listReadingsByDevice = `-- name: ListReadingsByDevice :many
SELECT id, device_id, at, hours_delta, location, operator_id, created_at FROM readings
WHERE device_id = $1
ORDER BY at DESC
LIMIT $2 OFFSET $3
`

type ListReadingsByDeviceParams struct {
	DeviceID int64 `json:"device_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListReadingsByDevice(ctx context.Context, arg ListReadingsByDeviceParams) ([]Reading, error) {
	rows, err := q.db.Query(ctx, listReadingsByDevice, arg.DeviceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reading
	for rows.Next() {
		var i Reading
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.At,
			&i.HoursDelta,
			&i.Location,
			&i.OperatorID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
