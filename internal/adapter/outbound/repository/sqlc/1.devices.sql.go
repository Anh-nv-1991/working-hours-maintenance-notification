// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 1.devices.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (
  serial_number, name, model, manufacturer, year_of_manufacture,
  commission_date, total_working_hour, after_overhaul_working_hour,
  status, last_service_at, location, plan_id, created_at, updated_at
) VALUES (
  $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,NOW(),NOW()
) RETURNING id, serial_number, name, model, manufacturer, year_of_manufacture, commission_date, total_working_hour, after_overhaul_working_hour, last_service_at, location, avg_daily_hours, expected_next_maint, status, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by, plan_id
`

type CreateDeviceParams struct {
	SerialNumber             string             `json:"serial_number"`
	Name                     string             `json:"name"`
	Model                    *string            `json:"model"`
	Manufacturer             *string            `json:"manufacturer"`
	YearOfManufacture        *int32             `json:"year_of_manufacture"`
	CommissionDate           pgtype.Date        `json:"commission_date"`
	TotalWorkingHour         *int32             `json:"total_working_hour"`
	AfterOverhaulWorkingHour *int32             `json:"after_overhaul_working_hour"`
	Status                   string             `json:"status"`
	LastServiceAt            pgtype.Timestamptz `json:"last_service_at"`
	Location                 *string            `json:"location"`
	PlanID                   *int64             `json:"plan_id"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice,
		arg.SerialNumber,
		arg.Name,
		arg.Model,
		arg.Manufacturer,
		arg.YearOfManufacture,
		arg.CommissionDate,
		arg.TotalWorkingHour,
		arg.AfterOverhaulWorkingHour,
		arg.Status,
		arg.LastServiceAt,
		arg.Location,
		arg.PlanID,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.SerialNumber,
		&i.Name,
		&i.Model,
		&i.Manufacturer,
		&i.YearOfManufacture,
		&i.CommissionDate,
		&i.TotalWorkingHour,
		&i.AfterOverhaulWorkingHour,
		&i.LastServiceAt,
		&i.Location,
		&i.AvgDailyHours,
		&i.ExpectedNextMaint,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.PlanID,
	)
	return i, err
}

const getDevice = `-- name: GetDevice :one
SELECT id, serial_number, name, model, manufacturer, year_of_manufacture, commission_date, total_working_hour, after_overhaul_working_hour, last_service_at, location, avg_daily_hours, expected_next_maint, status, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by, plan_id FROM devices WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDevice(ctx context.Context, id int64) (Device, error) {
	row := q.db.QueryRow(ctx, getDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.SerialNumber,
		&i.Name,
		&i.Model,
		&i.Manufacturer,
		&i.YearOfManufacture,
		&i.CommissionDate,
		&i.TotalWorkingHour,
		&i.AfterOverhaulWorkingHour,
		&i.LastServiceAt,
		&i.Location,
		&i.AvgDailyHours,
		&i.ExpectedNextMaint,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.PlanID,
	)
	return i, err
}

const listDevices = `-- name: ListDevices :many
SELECT id, serial_number, name, model, manufacturer, year_of_manufacture, commission_date, total_working_hour, after_overhaul_working_hour, last_service_at, location, avg_daily_hours, expected_next_maint, status, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by, plan_id FROM devices
WHERE deleted_at IS NULL
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListDevicesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDevices(ctx context.Context, arg ListDevicesParams) ([]Device, error) {
	rows, err := q.db.Query(ctx, listDevices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.SerialNumber,
			&i.Name,
			&i.Model,
			&i.Manufacturer,
			&i.YearOfManufacture,
			&i.CommissionDate,
			&i.TotalWorkingHour,
			&i.AfterOverhaulWorkingHour,
			&i.LastServiceAt,
			&i.Location,
			&i.AvgDailyHours,
			&i.ExpectedNextMaint,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
			&i.PlanID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteDevice = `-- name: SoftDeleteDevice :exec
UPDATE devices SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) SoftDeleteDevice(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, softDeleteDevice, id)
	return err
}

const updateDeviceBasic = `-- name: UpdateDeviceBasic :one
UPDATE devices SET
  name = $2,
  status = $3,
  location = $4,
  updated_at = NOW()
WHERE id = $1
RETURNING id, serial_number, name, model, manufacturer, year_of_manufacture, commission_date, total_working_hour, after_overhaul_working_hour, last_service_at, location, avg_daily_hours, expected_next_maint, status, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by, plan_id
`

type UpdateDeviceBasicParams struct {
	ID       int64   `json:"id"`
	Name     string  `json:"name"`
	Status   string  `json:"status"`
	Location *string `json:"location"`
}

func (q *Queries) UpdateDeviceBasic(ctx context.Context, arg UpdateDeviceBasicParams) (Device, error) {
	row := q.db.QueryRow(ctx, updateDeviceBasic,
		arg.ID,
		arg.Name,
		arg.Status,
		arg.Location,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.SerialNumber,
		&i.Name,
		&i.Model,
		&i.Manufacturer,
		&i.YearOfManufacture,
		&i.CommissionDate,
		&i.TotalWorkingHour,
		&i.AfterOverhaulWorkingHour,
		&i.LastServiceAt,
		&i.Location,
		&i.AvgDailyHours,
		&i.ExpectedNextMaint,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.PlanID,
	)
	return i, err
}

const updateDevicePlan = `-- name: UpdateDevicePlan :one
UPDATE devices SET
  plan_id = $2,
  updated_at = NOW()
WHERE id = $1
RETURNING id, serial_number, name, model, manufacturer, year_of_manufacture, commission_date, total_working_hour, after_overhaul_working_hour, last_service_at, location, avg_daily_hours, expected_next_maint, status, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by, plan_id
`

type UpdateDevicePlanParams struct {
	ID     int64  `json:"id"`
	PlanID *int64 `json:"plan_id"`
}

func (q *Queries) UpdateDevicePlan(ctx context.Context, arg UpdateDevicePlanParams) (Device, error) {
	row := q.db.QueryRow(ctx, updateDevicePlan, arg.ID, arg.PlanID)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.SerialNumber,
		&i.Name,
		&i.Model,
		&i.Manufacturer,
		&i.YearOfManufacture,
		&i.CommissionDate,
		&i.TotalWorkingHour,
		&i.AfterOverhaulWorkingHour,
		&i.LastServiceAt,
		&i.Location,
		&i.AvgDailyHours,
		&i.ExpectedNextMaint,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.PlanID,
	)
	return i, err
}
