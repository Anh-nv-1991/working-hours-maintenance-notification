// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 4.alerts.sql

package sqlc

import (
	"context"
)

const createAlert = `-- name: CreateAlert :one
INSERT INTO alerts (device_id, type, message)
VALUES ($1,$2,$3)
RETURNING id, device_id, type, message, created_at, resolved, resolved_at, resolved_by
`

type CreateAlertParams struct {
	DeviceID int64  `json:"device_id"`
	Type     string `json:"type"`
	Message  string `json:"message"`
}

func (q *Queries) CreateAlert(ctx context.Context, arg CreateAlertParams) (Alert, error) {
	row := q.db.QueryRow(ctx, createAlert, arg.DeviceID, arg.Type, arg.Message)
	var i Alert
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Type,
		&i.Message,
		&i.CreatedAt,
		&i.Resolved,
		&i.ResolvedAt,
		&i.ResolvedBy,
	)
	return i, err
}

const listOpenAlertsByDevice = `-- name: ListOpenAlertsByDevice :many
SELECT id, device_id, type, message, created_at, resolved, resolved_at, resolved_by FROM alerts
WHERE device_id = $1 AND resolved = FALSE
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListOpenAlertsByDeviceParams struct {
	DeviceID int64 `json:"device_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListOpenAlertsByDevice(ctx context.Context, arg ListOpenAlertsByDeviceParams) ([]Alert, error) {
	rows, err := q.db.Query(ctx, listOpenAlertsByDevice, arg.DeviceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Alert
	for rows.Next() {
		var i Alert
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.Type,
			&i.Message,
			&i.CreatedAt,
			&i.Resolved,
			&i.ResolvedAt,
			&i.ResolvedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resolveAlert = `-- name: ResolveAlert :one
UPDATE alerts SET
  resolved = TRUE,
  resolved_at = NOW(),
  resolved_by = $2
WHERE id = $1
RETURNING id, device_id, type, message, created_at, resolved, resolved_at, resolved_by
`

type ResolveAlertParams struct {
	ID         int64   `json:"id"`
	ResolvedBy *string `json:"resolved_by"`
}

func (q *Queries) ResolveAlert(ctx context.Context, arg ResolveAlertParams) (Alert, error) {
	row := q.db.QueryRow(ctx, resolveAlert, arg.ID, arg.ResolvedBy)
	var i Alert
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Type,
		&i.Message,
		&i.CreatedAt,
		&i.Resolved,
		&i.ResolvedAt,
		&i.ResolvedBy,
	)
	return i, err
}
