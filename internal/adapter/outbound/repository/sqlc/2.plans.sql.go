// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 2.plans.sql

package sqlc

import (
	"context"
)

const createPlan = `-- name: CreatePlan :one
INSERT INTO plans (name, interval_hours, description, created_at, updated_at)
VALUES ($1,$2,$3,NOW(),NOW()) RETURNING id, name, interval_hours, description, created_at, updated_at
`

type CreatePlanParams struct {
	Name          string  `json:"name"`
	IntervalHours int32   `json:"interval_hours"`
	Description   *string `json:"description"`
}

func (q *Queries) CreatePlan(ctx context.Context, arg CreatePlanParams) (Plan, error) {
	row := q.db.QueryRow(ctx, createPlan, arg.Name, arg.IntervalHours, arg.Description)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IntervalHours,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePlan = `-- name: DeletePlan :exec
DELETE FROM plans WHERE id = $1
`

func (q *Queries) DeletePlan(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePlan, id)
	return err
}

const getPlan = `-- name: GetPlan :one
SELECT id, name, interval_hours, description, created_at, updated_at FROM plans WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPlan(ctx context.Context, id int64) (Plan, error) {
	row := q.db.QueryRow(ctx, getPlan, id)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IntervalHours,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPlans = `-- name: ListPlans :many
SELECT id, name, interval_hours, description, created_at, updated_at FROM plans ORDER BY id LIMIT $1 OFFSET $2
`

type ListPlansParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPlans(ctx context.Context, arg ListPlansParams) ([]Plan, error) {
	rows, err := q.db.Query(ctx, listPlans, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plan
	for rows.Next() {
		var i Plan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IntervalHours,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlan = `-- name: UpdatePlan :one
UPDATE plans SET
  name = $2,
  interval_hours = $3,
  description = $4,
  updated_at = NOW()
WHERE id = $1
RETURNING id, name, interval_hours, description, created_at, updated_at
`

type UpdatePlanParams struct {
	ID            int64   `json:"id"`
	Name          string  `json:"name"`
	IntervalHours int32   `json:"interval_hours"`
	Description   *string `json:"description"`
}

func (q *Queries) UpdatePlan(ctx context.Context, arg UpdatePlanParams) (Plan, error) {
	row := q.db.QueryRow(ctx, updatePlan,
		arg.ID,
		arg.Name,
		arg.IntervalHours,
		arg.Description,
	)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IntervalHours,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
