// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 5.maintenance_events.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMaintenanceEvent = `-- name: CreateMaintenanceEvent :one
INSERT INTO maintenance_events (device_id, at, interval, notes, performed_by, cost)
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING id, device_id, at, interval, notes, performed_by, cost, created_at
`

type CreateMaintenanceEventParams struct {
	DeviceID    int64              `json:"device_id"`
	At          pgtype.Timestamptz `json:"at"`
	Interval    *int32             `json:"interval"`
	Notes       *string            `json:"notes"`
	PerformedBy *string            `json:"performed_by"`
	Cost        pgtype.Numeric     `json:"cost"`
}

func (q *Queries) CreateMaintenanceEvent(ctx context.Context, arg CreateMaintenanceEventParams) (MaintenanceEvent, error) {
	row := q.db.QueryRow(ctx, createMaintenanceEvent,
		arg.DeviceID,
		arg.At,
		arg.Interval,
		arg.Notes,
		arg.PerformedBy,
		arg.Cost,
	)
	var i MaintenanceEvent
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.At,
		&i.Interval,
		&i.Notes,
		&i.PerformedBy,
		&i.Cost,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMaintenanceEvent = `-- name: DeleteMaintenanceEvent :exec
DELETE FROM maintenance_events WHERE id = $1
`

func (q *Queries) DeleteMaintenanceEvent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMaintenanceEvent, id)
	return err
}

const listMaintenanceByDevice = `-- name: ListMaintenanceByDevice :many
SELECT id, device_id, at, interval, notes, performed_by, cost, created_at FROM maintenance_events
WHERE device_id = $1
ORDER BY at DESC
LIMIT $2 OFFSET $3
`

type ListMaintenanceByDeviceParams struct {
	DeviceID int64 `json:"device_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListMaintenanceByDevice(ctx context.Context, arg ListMaintenanceByDeviceParams) ([]MaintenanceEvent, error) {
	rows, err := q.db.Query(ctx, listMaintenanceByDevice, arg.DeviceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MaintenanceEvent
	for rows.Next() {
		var i MaintenanceEvent
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.At,
			&i.Interval,
			&i.Notes,
			&i.PerformedBy,
			&i.Cost,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
